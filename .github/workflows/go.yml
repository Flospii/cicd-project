name: Go CI Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    # Define PostgreSQL as a service container
    services:
      postgres:
        image: postgres:13 # Using PostgreSQL image version 13
        env:
          POSTGRES_DB: flospi # Name of the PostgreSQL database
          POSTGRES_USER: flospi # PostgreSQL username
          POSTGRES_PASSWORD: Test.123 # PostgreSQL password
        ports:
          - 5432:5432 # Expose port 5432 to the host
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    # Set environment variables for the application initialization
    env:
      APP_DB_USERNAME: flospi # Application DB username
      APP_DB_PASSWORD: Test.123 # Application DB password
      APP_DB_NAME: flospi # Application DB name

    steps:
      # Get code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Go with the specified version
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.24.1"

      # Dependencies
      - name: Install dependencies
        run: go mod download

      # Execute tests
      - name: Run tests
        run: go test -v ./...

      # Build script
      - name: Build application
        run: go build -o myapp .

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: sonarqube # ensure tests & Sonar have passed
    env:
      IMAGE_NAME: flospi/cicd-go-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & tag Docker image
        run: |
          TAG=${GITHUB_SHA::8}
          docker build -t $IMAGE_NAME:$TAG .
          docker tag      $IMAGE_NAME:$TAG $IMAGE_NAME:latest

      - name: Push Docker image
        run: |
          TAG=${GITHUB_SHA::8}
          docker push $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:latest

  trivy-scan:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Trivy container image scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image # only the image
          image-ref: flospi/cicd-go-app:latest
          format: table
          exit-code: "1" # fail on HIGH or CRITICAL
          severity: CRITICAL,HIGH
          timeout: 5m

      - name: Trivy Dockerfile (IaC) scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs # only the filesystem (Dockerfile)
          scan-ref: "." # point at repo root
          format: table
          exit-code: "1"
          severity: CRITICAL,HIGH
          timeout: 5m
