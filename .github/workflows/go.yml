name: Go CI Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    # Define PostgreSQL as a service container
    services:
      postgres:
        image: postgres:13 # Using PostgreSQL image version 13
        env:
          POSTGRES_DB: flospi # Name of the PostgreSQL database
          POSTGRES_USER: flospi # PostgreSQL username
          POSTGRES_PASSWORD: Test.123 # PostgreSQL password
        ports:
          - 5432:5432 # Expose port 5432 to the host
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    # Set environment variables for the application initialization
    env:
      APP_DB_USERNAME: flospi # Application DB username
      APP_DB_PASSWORD: Test.123 # Application DB password
      APP_DB_NAME: flospi # Application DB name

    steps:
      # Get code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Go with the specified version
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.24.1"

      # Dependencies
      - name: Install dependencies
        run: go mod download

      # Execute tests
      - name: Run tests
        run: go test -v ./...

      # Build script
      - name: Build application
        run: go build -o myapp .

sonarcloud:
  runs-on: ubuntu-latest
  needs: test
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.organization=your-organization
          -Dsonar.projectKey=your-project-key
          -Dsonar.sources=.
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
